{"version":3,"sources":["app.js","environment.js","main.js","url-service.js","call-input/call-base.js","call-input/call-input.js","call-output/call-output.js","call-selector/call-selector.js","resources/index.js","server/server.js","call-input/delete-call/delete-call.js","call-input/get-call/get-call.js","call-input/post-call/post-call.js","call-input/put-call/put-call.js","C:/Dev/dotnet-core-api-talk/aurelia-api-client/src/app.html","C:/Dev/dotnet-core-api-talk/aurelia-api-client/src/app.css","C:/Dev/dotnet-core-api-talk/aurelia-api-client/src/call-input/call-input.css","C:/Dev/dotnet-core-api-talk/aurelia-api-client/src/call-input/call-input.html","C:/Dev/dotnet-core-api-talk/aurelia-api-client/src/call-output/call-output.html","C:/Dev/dotnet-core-api-talk/aurelia-api-client/src/call-selector/call-selector.css","C:/Dev/dotnet-core-api-talk/aurelia-api-client/src/call-selector/call-selector.html","C:/Dev/dotnet-core-api-talk/aurelia-api-client/src/server/server.html","C:/Dev/dotnet-core-api-talk/aurelia-api-client/src/call-input/delete-call/delete-call.html","C:/Dev/dotnet-core-api-talk/aurelia-api-client/src/call-input/get-call/get-call.html","C:/Dev/dotnet-core-api-talk/aurelia-api-client/src/call-input/post-call/post-call.html","C:/Dev/dotnet-core-api-talk/aurelia-api-client/src/call-input/put-call/put-call.html"],"names":["App","debug","testing","configure","Promise","config","longStackTraces","warnings","wForgottenReturn","aurelia","use","standardConfiguration","feature","developmentLogging","plugin","b","useAll","start","then","setRoot","dotnetKey","nodeKey","servers","name","baseUrl","UrlService","eventAggregator","currentServerKey","publish","toggleServer","getServer","CallBase","urlService","httpClient","callUri","_setUrl","messageReceivedSubscription","subscribe","server","_resetAllFields","url","CallInput","show","showGet","showPost","showPut","showDelete","callType","detached","dispose","CallOutput","serverResponse","output","CallSelector","changeToGet","changeToPost","changeToPut","changeToDelete","Server","DeleteCall","id","executeCall","fetch","method","data","status","statusText","catch","error","GetCall","response","json","JSON","stringify","undefined","defaultIsbn","PostCall","title","author","isbn","postBody","body","PutCall","putBody","savedResponse","contentType","headers","get","indexOf","console","log"],"mappings":"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","file":"app-bundle.js","sourcesContent":["export class App {\n\n}\n","export default {\n  debug: true,\n  testing: true\n};\n","import environment from './environment';\n\n//Configure Bluebird Promises.\nPromise.config({\n  longStackTraces: environment.debug,\n  warnings: {\n    wForgottenReturn: false\n  }\n});\n\nexport function configure(aurelia) {\n  aurelia.use\n    .standardConfiguration()\n    .feature('resources');\n\n  if (environment.debug) {\n    aurelia.use.developmentLogging();\n  }\n\n  if (environment.testing) {\n    aurelia.use.plugin('aurelia-testing');\n  }\n\n  aurelia.use.plugin('aurelia-materialize-bridge', b => b.useAll());\n\n  aurelia.start().then(() => aurelia.setRoot());\n}\n","import { inject } from 'aurelia-framework';\r\nimport { EventAggregator } from 'aurelia-event-aggregator';\r\n\r\nconst dotnetKey = \"dotnet\",\r\n    nodeKey = \"node\";\r\n\r\nconst servers = {\r\n    [dotnetKey]: {\r\n        name: \"ASP.NET Core\",\r\n        baseUrl: \"http://localhost:5000\"\r\n    },\r\n    [nodeKey]: {\r\n        name: \"NodeJS\",\r\n        baseUrl: \"http://localhost:5001\"\r\n    }\r\n};\r\n\r\n\r\n\r\n\r\n@inject(EventAggregator)\r\nexport class UrlService {\r\n    constructor(eventAggregator) {\r\n        this.eventAggregator = eventAggregator;\r\n        this.currentServerKey = dotnetKey;\r\n        this.eventAggregator.publish('server-changed', servers[this.currentServerKey]);\r\n    }\r\n\r\n    toggleServer() {\r\n        this.currentServerKey = this.currentServerKey === dotnetKey ? nodeKey : dotnetKey;\r\n        this.eventAggregator.publish('server-changed', servers[this.currentServerKey]);\r\n    }\r\n\r\n    getServer() {\r\n        return servers[this.currentServerKey];\r\n    }\r\n}","\r\nexport class CallBase {\r\n\r\n    constructor(urlService, eventAggregator, httpClient, callUri) {\r\n        this.urlService = urlService;\r\n        this.eventAggregator = eventAggregator;\r\n        this.httpClient = httpClient;\r\n        this.callUri = callUri;\r\n\r\n        this._setUrl(urlService.getServer().baseUrl);\r\n\r\n        this.messageReceivedSubscription = this.eventAggregator.subscribe('server-changed', server => {\r\n            this._setUrl(server.baseUrl);\r\n        });\r\n\r\n        this.messageReceivedSubscription = this.eventAggregator.subscribe('change-call-type', server => {\r\n            this._resetAllFields();\r\n        });\r\n    }\r\n\r\n    _setUrl(baseUrl) {\r\n        this.url = baseUrl + this.callUri;\r\n    }\r\n\r\n    _resetAllFields() {\r\n        \r\n    }\r\n\r\n}","import { inject } from 'aurelia-framework';\r\nimport { EventAggregator } from 'aurelia-event-aggregator';\r\n\r\n@inject(EventAggregator)\r\nexport class CallInput {\r\n    show = \"get\";\r\n\r\n    showGet = false;\r\n    showPost = false;\r\n    showPut = false;\r\n    showDelete = false;\r\n\r\n    constructor(eventAggregator) {\r\n        this.eventAggregator = eventAggregator;\r\n        this.messageReceivedSubscription = this.eventAggregator.subscribe('change-call-type', callType => {\r\n            this.showGet = false;\r\n            this.showPost = false;\r\n            this.showPut = false;\r\n            this.showDelete = false;\r\n\r\n            switch (callType) {\r\n                case 'get':\r\n                    this.showGet = true;\r\n                    break;\r\n                case 'post':\r\n                    this.showPost = true;\r\n                    break;\r\n                case 'put':\r\n                    this.showPut = true;\r\n                    break;\r\n                case 'delete':\r\n                    this.showDelete = true;\r\n                    break;\r\n            }\r\n        });\r\n    }\r\n\r\n    detached() {\r\n        this.messageReceivedSubscription.dispose();\r\n    }\r\n}","import { inject } from 'aurelia-framework';\r\nimport { EventAggregator } from 'aurelia-event-aggregator';\r\n\r\n@inject(EventAggregator)\r\nexport class CallOutput {\r\n    constructor(eventAggregator) {\r\n        this.eventAggregator = eventAggregator;\r\n\r\n        this.messageReceivedSubscription = this.eventAggregator.subscribe('call-done', output => {\r\n            this.serverResponse = output;\r\n        });\r\n    }\r\n    \r\n}","import { inject } from 'aurelia-framework';\r\nimport { EventAggregator } from 'aurelia-event-aggregator';\r\n\r\n@inject(EventAggregator)\r\nexport class CallSelector {\r\n\r\n    constructor(eventAggregator) {\r\n        this.eventAggregator = eventAggregator;\r\n    }\r\n\r\n    changeToGet() {\r\n        this.eventAggregator.publish('change-call-type', 'get');\r\n    }\r\n\r\n    changeToPost() {\r\n        this.eventAggregator.publish('change-call-type', 'post');\r\n    }\r\n\r\n    changeToPut() {\r\n        this.eventAggregator.publish('change-call-type', 'put');\r\n    }\r\n\r\n    changeToDelete() {\r\n        this.eventAggregator.publish('change-call-type', 'delete');\r\n    }\r\n\r\n\r\n}","export function configure(config) {\n  //config.globalResources([]);\n}\n","import { inject } from 'aurelia-framework';\r\nimport { UrlService } from '../url-service';\r\n\r\n@inject(UrlService)\r\nexport class Server {\r\n\r\n    constructor(urlService) {\r\n        this.urlService = urlService;\r\n        this.server = this.urlService.getServer();\r\n    }\r\n\r\n    toggleServer() {\r\n        this.urlService.toggleServer();\r\n        this.server = this.urlService.getServer();\r\n    }\r\n}","import { inject } from 'aurelia-framework';\r\nimport { EventAggregator } from 'aurelia-event-aggregator';\r\nimport { UrlService } from '../../url-service';\r\nimport { HttpClient, json } from 'aurelia-fetch-client';\r\nimport { CallBase } from '../call-base'\r\n\r\n@inject(UrlService, EventAggregator, HttpClient)\r\nexport class DeleteCall extends CallBase {\r\n\r\n    id = \"<SET-ME>\";\r\n\r\n    constructor(urlService, eventAggregator, httpClient) {\r\n        super(urlService, eventAggregator, httpClient, '/api/books');\r\n    }\r\n\r\n    executeCall() {\r\n        this.httpClient.fetch(this.url + \"/\" + this.id, {\r\n            method: 'delete'\r\n        })\r\n            .then(data => {\r\n                this.eventAggregator.publish('call-done', data.status +  \" \" + data.statusText);\r\n            })\r\n            .catch(error => {\r\n                this.eventAggregator.publish('call-done', error);\r\n            });\r\n    }\r\n\r\n    _resetAllFields() {\r\n        this.id = \"\";\r\n    }\r\n\r\n}","import { inject } from 'aurelia-framework';\r\nimport { EventAggregator } from 'aurelia-event-aggregator';\r\nimport { UrlService } from '../../url-service';\r\nimport { HttpClient } from 'aurelia-fetch-client';\r\nimport { CallBase } from '../call-base'\r\n\r\n@inject(UrlService, EventAggregator, HttpClient)\r\nexport class GetCall extends CallBase {\r\n\r\n    constructor(urlService, eventAggregator, httpClient) {\r\n        super(urlService, eventAggregator, httpClient, '/api/books');\r\n    }\r\n\r\n    executeCall() {\r\n        this.httpClient.fetch(this.url)\r\n            .then(response => response.json())\r\n            .then(data => {\r\n                this.eventAggregator.publish('call-done', JSON.stringify(data, undefined, 2));\r\n            })\r\n            .catch(error => {\r\n                this.eventAggregator.publish('call-done', error);\r\n            });\r\n    }\r\n\r\n}","import { inject } from 'aurelia-framework';\r\nimport { EventAggregator } from 'aurelia-event-aggregator';\r\nimport { UrlService } from '../../url-service';\r\nimport { HttpClient, json } from 'aurelia-fetch-client';\r\nimport { CallBase } from '../call-base'\r\n\r\nconst defaultIsbn = \"978-0345391803\";\r\n\r\n@inject(UrlService, EventAggregator, HttpClient)\r\nexport class PostCall extends CallBase {\r\n\r\n    title = \"\";\r\n    author = \"\";\r\n    isbn = defaultIsbn;\r\n\r\n    constructor(urlService, eventAggregator, httpClient) {\r\n        super(urlService, eventAggregator, httpClient, '/api/books');\r\n    }\r\n\r\n    executeCall() {\r\n        const postBody = {\r\n            title: this.title,\r\n            author: this.author,\r\n            isbn: this.isbn\r\n        };\r\n\r\n        this.httpClient.fetch(this.url, {\r\n            method: 'post',\r\n            body: json(postBody)\r\n        })\r\n            .then(response => response.json())\r\n            .then(data => {\r\n                this.eventAggregator.publish('call-done', JSON.stringify(data, undefined, 2));\r\n            })\r\n            .catch(error => {\r\n                this.eventAggregator.publish('call-done', error);\r\n            });\r\n    }\r\n\r\n    _resetAllFields() {\r\n        this.title = \"\";\r\n        this.author = \"\";\r\n        this.isbn = defaultIsbn;\r\n    }\r\n\r\n}","import { inject } from 'aurelia-framework';\r\nimport { EventAggregator } from 'aurelia-event-aggregator';\r\nimport { UrlService } from '../../url-service';\r\nimport { HttpClient, json } from 'aurelia-fetch-client';\r\nimport { CallBase } from '../call-base'\r\n\r\n@inject(UrlService, EventAggregator, HttpClient)\r\nexport class PutCall extends CallBase {\r\n\r\n    id = \"<SET-ME>\";\r\n    title = \"\";\r\n    author = \"\";\r\n    isbn = \"978-3-16-148410-0\";\r\n\r\n    constructor(urlService, eventAggregator, httpClient) {\r\n        super(urlService, eventAggregator, httpClient, '/api/books');\r\n    }\r\n\r\n    executeCall() {\r\n        const putBody = {\r\n            title: this.title,\r\n            author: this.author,\r\n            isbn: this.isbn\r\n        };\r\n\r\n        let savedResponse;\r\n        this.httpClient.fetch(this.url + \"/\" + this.id, {\r\n            method: 'put',\r\n            body: json(putBody)\r\n        })\r\n            .then(response => {\r\n                savedResponse = response;\r\n                var contentType = response.headers.get(\"content-type\");\r\n                if (contentType && contentType.indexOf(\"application/json\") !== -1) {\r\n                    return response.json();\r\n                }\r\n            })\r\n            .then(json => {\r\n                if (json) {\r\n                    this.eventAggregator.publish('call-done', JSON.stringify(json, undefined, 2));\r\n                } else {\r\n                    this.eventAggregator.publish('call-done', savedResponse.status + \" \" + savedResponse.statusText);\r\n                }\r\n            })\r\n            .catch(error => {\r\n                console.log(\"caught?\");\r\n                this.eventAggregator.publish('call-done', error);\r\n            });\r\n    }\r\n\r\n    _resetAllFields() {\r\n        this.id = \"<SET-ME>\";\r\n        this.title = \"\";\r\n        this.author = \"\";\r\n        this.isbn = \"978-3-16-148410-0\";\r\n    }\r\n\r\n}",null,null,null,null,null,null,null,null,null,null,null,null],"sourceRoot":"../src"}